import os

# Set the project directory path
project_directory = './'

# Function to generate CMakeLists.txt
def generate_cmake():
    cpp_files = []
    h_files = []
    
    # Traverse the project directory and collect all .cpp and .h files
    for root, dirs, files in os.walk(project_directory):
        for file in files:
            if file.endswith('.cpp'):
                cpp_files.append(os.path.join(root, file))
            elif file.endswith('.h'):
                h_files.append(os.path.join(root, file))

    # Generate the content of the CMakeLists.txt
    cmake_content = '''cmake_minimum_required(VERSION 3.10)
project(AutoGeneratedProject)

# Add all source files
set(SOURCES
    {source_files}
)

# Add executable target
add_executable(AutoGeneratedExecutable ${{SOURCES}})
'''

    # Format the list of .cpp files for CMake
    cpp_files_str = '\n    '.join(cpp_files)
    
    # Replace placeholder with the actual source files
    cmake_content = cmake_content.format(source_files=cpp_files_str)

    # Write to CMakeLists.txt file
    with open(os.path.join(project_directory, 'CMakeLists.txt'), 'w') as cmake_file:
        cmake_file.write(cmake_content)
        print("CMakeLists.txt has been generated!")

# Call the function to generate the CMakeLists.txt
generate_cmake()

